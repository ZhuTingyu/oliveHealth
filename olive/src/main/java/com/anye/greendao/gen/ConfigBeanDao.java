package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.olive.model.entity.ConfigBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIG_BEAN".
*/
public class ConfigBeanDao extends AbstractDao<ConfigBean, String> {

    public static final String TABLENAME = "CONFIG_BEAN";

    /**
     * Properties of entity ConfigBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Cache = new Property(2, String.class, "cache", false, "CACHE");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property Key = new Property(4, String.class, "key", false, "KEY");
        public final static Property Ts = new Property(5, Long.class, "ts", false, "TS");
    }


    public ConfigBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIG_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"CACHE\" TEXT," + // 2: cache
                "\"USER_ID\" TEXT," + // 3: userId
                "\"KEY\" TEXT," + // 4: key
                "\"TS\" INTEGER);"); // 5: ts
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CONFIG_BEAN_TYPE ON \"CONFIG_BEAN\"" +
                " (\"TYPE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConfigBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String cache = entity.getCache();
        if (cache != null) {
            stmt.bindString(3, cache);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
 
        Long ts = entity.getTs();
        if (ts != null) {
            stmt.bindLong(6, ts);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConfigBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String cache = entity.getCache();
        if (cache != null) {
            stmt.bindString(3, cache);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
 
        Long ts = entity.getTs();
        if (ts != null) {
            stmt.bindLong(6, ts);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ConfigBean readEntity(Cursor cursor, int offset) {
        ConfigBean entity = new ConfigBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cache
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // key
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // ts
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConfigBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCache(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTs(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ConfigBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ConfigBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConfigBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
