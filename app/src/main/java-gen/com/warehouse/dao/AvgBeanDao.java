package com.warehouse.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.warehouse.dao.AvgBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AvgDB".
*/
public class AvgBeanDao extends AbstractDao<AvgBean, Long> {

    public static final String TABLENAME = "AvgDB";

    /**
     * Properties of entity AvgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property ImgUrl = new Property(1, String.class, "imgUrl", false, "IMG_URL");
        public final static Property ClickUrl = new Property(2, String.class, "clickUrl", false, "CLICK_URL");
        public final static Property StartTime = new Property(3, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, Long.class, "endTime", false, "END_TIME");
        public final static Property Priority = new Property(5, Integer.class, "priority", false, "PRIORITY");
        public final static Property StopTime = new Property(6, Long.class, "stopTime", false, "STOP_TIME");
    }


    public AvgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AvgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AvgDB\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMG_URL\" TEXT," + // 1: imgUrl
                "\"CLICK_URL\" TEXT," + // 2: clickUrl
                "\"START_TIME\" INTEGER," + // 3: startTime
                "\"END_TIME\" INTEGER," + // 4: endTime
                "\"PRIORITY\" INTEGER," + // 5: priority
                "\"STOP_TIME\" INTEGER);"); // 6: stopTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_AvgDB_ID ON AvgDB" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AvgDB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AvgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
 
        String clickUrl = entity.getClickUrl();
        if (clickUrl != null) {
            stmt.bindString(3, clickUrl);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(6, priority);
        }
 
        Long stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindLong(7, stopTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AvgBean readEntity(Cursor cursor, int offset) {
        AvgBean entity = new AvgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clickUrl
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // startTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // priority
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // stopTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AvgBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImgUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClickUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPriority(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStopTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AvgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AvgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
