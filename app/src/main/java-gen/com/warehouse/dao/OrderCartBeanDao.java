package com.warehouse.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.warehouse.dao.OrderCartBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_CART_BEAN".
*/
public class OrderCartBeanDao extends AbstractDao<OrderCartBean, Long> {

    public static final String TABLENAME = "ORDER_CART_BEAN";

    /**
     * Properties of entity OrderCartBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property ProductId = new Property(1, Long.class, "productId", false, "PRODUCT_ID");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property Count = new Property(3, Integer.class, "count", false, "COUNT");
        public final static Property Ts = new Property(4, Long.class, "ts", false, "TS");
    }


    public OrderCartBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OrderCartBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_CART_BEAN\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRODUCT_ID\" INTEGER," + // 1: productId
                "\"USER_ID\" INTEGER," + // 2: userId
                "\"COUNT\" INTEGER," + // 3: count
                "\"TS\" INTEGER);"); // 4: ts
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ORDER_CART_BEAN_ID ON ORDER_CART_BEAN" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_CART_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderCartBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(2, productId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(4, count);
        }
 
        Long ts = entity.getTs();
        if (ts != null) {
            stmt.bindLong(5, ts);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderCartBean readEntity(Cursor cursor, int offset) {
        OrderCartBean entity = new OrderCartBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // count
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // ts
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderCartBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTs(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderCartBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderCartBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
